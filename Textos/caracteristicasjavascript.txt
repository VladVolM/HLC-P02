<article>
<img class="imagen" src="Imagenes/javascript.png">
	<h1>Caracter&iacutesticas JavaScript</h1>
	<p>
		Las siguientes caracter&iacute;sticas son comunes a todas las implementaciones que se ajustan al est&aacute;ndar ECMAScript, a menos que especifique expl&iacute;citamente en caso contrario.
		<p>
		<h3>Imperativo y estructurado</h3>
		JavaScript es compatible con gran parte de la estructura de programaci&oacute;n de C (por ejemplo, sentencias if, bucles for, sentencias switch, etc.). Con una salvedad, en parte: en C, el &aacute;mbito de las variables alcanza al bloque en el cual fueron definidas; sin embargo JavaScript no es compatible con esto, puesto que el &aacute;mbito de las variables es el de la funci&oacute;n en la cual fueron declaradas. Esto cambia con la versi&oacute;n de ECMAScript 2015, ya que a&ntilde;ade compatibilidad con block scoping por medio de la palabra clave let. Como en C, JavaScript hace distinci&oacute;n entre expresiones y sentencias. Una diferencia sint&aacute;ctica con respecto a C es la inserci&oacute;n autom&aacute;tica de punto y coma, es decir, en JavaScript los puntos y coma que finalizan una sentencia pueden ser omitidos.
		<h3>Din&aacute;mico</h3>
		<ul>
			<li><strong>Tipado din&aacute;mico: </strong>Como en la mayoría de lenguajes de scripting, el tipo est&aacute; asociado al valor, no a la variable. Por ejemplo, una variable x en un momento dado puede estar ligada a un n&uacute;mero y más adelante, religada a una cadena. JavaScript es compatible con varias formas de comprobar el tipo de un objeto, incluyendo duck typing.​ Una forma de saberlo es por medio de la palabra clave typeof.</li>
			<li><strong>Objetual: </strong>JavaScript est&aacute; formado casi en su totalidad por objetos. Los objetos en JavaScript son arrays asociativos, mejorados con la inclusi&oacute;n de prototipos (ver m&aacute;s adelante). Los nombres de las propiedades de los objetos son claves de tipo cadena: obj.x = 10 y obj['x'] = 10 son equivalentes, siendo az&uacute;car sint&aacute;ctico la notaci&oacute;n con punto. Las propiedades y sus valores pueden ser creados, cambiados o eliminados en tiempo de ejecuci&oacute;n. La mayor&iacute;a de propiedades de un objeto (y aquellas que son incluidas por la cadena de la herencia prototípica) pueden ser enumeradas a por medio de la instrucci&oacute;n de bucle for... in. JavaScript tiene un pequeño n&uacute;mero de objetos predefinidos como son Function y Date.</li>
		</ul>
		<h3>Funcional</h3>
		<ul>
			<li><strong>Funciones de primera clase: </strong>A las funciones se les suele llamar ciudadanos de primera clase; son objetos en s&iacute; mismos. Como tal, poseen propiedades y m&eacute;todos, como .call() y .bind(). Una funci&oacute;n anidada es una funci&oacute;n definida dentro de otra. Esta es creada cada vez que la funci&oacute;n externa es invocada. Adem&aacute;s, cada funci&oacute;n creada forma una clausura; es el resultado de evaluar un &aacute;mbito conteniendo en una o m&aacute;s variables dependientes de otro &aacute;mbito externo, incluyendo constantes, variables locales y argumentos de la funci&oacute;n externa llamante. El resultado de la evaluaci&oacute;n de dicha clausura forma parte del estado interno de cada objeto funci&oacute;n, incluso despu&eacute;s de que la funci&oacute;n exterior concluya su evaluaci&oacute;n.</li>
		</ul>
		<h3>Prototípico</h3>
		<ul>
			<li><strong>Prototipos: </strong>JavaScript usa prototipos en vez de clases para el uso de herencia. Es posible llegar a emular muchas de las caracter&iacute;sticas que proporcionan las clases en lenguajes orientados a objetos tradicionales por medio de prototipos en JavaScript.</li>
			<li><strong>Funciones como constructores de objetos: </strong>Las funciones tambi&eacute;n se comportan como constructores. Prefijar una llamada a la funci&oacute;n con la palabra clave new crear una nueva instancia de un prototipo, que heredan propiedades y m&eacute;todos del constructor (incluidas las propiedades del prototipo de Object). ECMAScript 5 ofrece el m&eacute;todo Object.create, permitiendo la creaci&oacute;n explícita de una instancia sin tener que heredar autom&aacute;ticamente del prototipo de Object (en entornos antiguos puede aparecer el prototipo del objeto creado como null). La propiedad prototype del constructor determina el objeto usado para el prototipo interno de los nuevos objetos creados. Se pueden a&ntilde;adir nuevos métodos modificando el prototipo del objeto usado como constructor. Constructores predefinidos en JavaScript, como Array u Object, tambi&eacute;n tienen prototipos que pueden ser modificados. Aunque esto sea posible se considera una mala pr&aacute;ctica modificar el prototipo de Object ya que la mayor&iacute;a de los objetos en Javascript heredan los m&eacute;todos y propiedades del objeto prototype, objetos los cuales pueden esperar que estos no hayan sido modificados.</li>
		</ul>
		<h3>Otras características</h3>
		<ul>
			<li><strong>Entorno de ejecuci&oacute;n: </strong>JavaScript normalmente depende del entorno en el que se ejecute (por ejemplo, en un navegador web) para ofrecer objetos y m&eacute;todos por los que los scripts pueden interactuar con el "mundo exterior". De hecho, depende del entorno para ser capaz de proporcionar la capacidad de incluir o importar scripts (por ejemplo, en HTML por medio del tag &lt;script&gt;). (Esto no es una caracter&iacute;stica del lenguaje, pero es com&uacute;n en la mayoría de las implementaciones de JavaScript.)
			<li><strong>Funciones variádicas: </strong>Un n&uacute;mero indefinido de parámetros pueden ser pasados a la funci&oacute;n. La funci&oacute;n puede acceder a ellos a trav&eacute;s de los par&aacute;metros o tambi&eacute;n a trav&eacute;s del objeto local arguments. Las funciones vari&aacute;dicas también pueden ser creadas usando el m&eacute;todo .apply().</li>
			<li><strong>Funciones como métodos: </strong>A diferencia de muchos lenguajes orientados a objetos, no hay distinci&oacute;n entre la definici&oacute;n de funci&oacute;n y la definici&oacuten de m&eacute;todo. M&aacute;s bien, la distinci&oacute;n se produce durante la llamada a la funci&oacute;n; una funci&oacute;n puede ser llamada como un m&eacute;étodo. Cuando una funci&oacute;n es llamada como un m&eacute;todo de un objeto, la palabra clave this, que es una variable local a la funci&oacute;n, representa al objeto que invoc&oacute; dicha funci&oacute;n.</li>
			<li><strong>Arrays y la definici&oacute;n literal de objetos: </strong>Al igual que muchos lenguajes de script, arrays y objetos (arrays asociativos en otros idiomas) pueden ser creados con una sintaxis abreviada. De hecho, estos literales forman la base del formato de datos JSON.</li>
			<li><strong>Expresiones regulares: </strong>JavaScript tambi&eacute;n es compatible con expresiones regulares de una manera similar a Perl, que proporcionan una sintaxis concisa y poderosa para la manipulaci&oacute;n de texto que es m&aacute;s sofisticado que las funciones incorporadas a los objetos de tipo string.</li>
		</ul>
		</p>
	</p>
</article>
